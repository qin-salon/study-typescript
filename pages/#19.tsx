//【TypeScript入門 #19】

//========================================================================================================================================================================================================================================================================================================================================関数のgenerics========================================================================================================================================================================================================================================================================================================================================
//

//function
// function foo<T>(arg: T) {
//   return { value: arg };
// }

//arrow function
// const foo = <T,>(arg: T) => {
//   return { value: arg };
// };

// const foo1 = foo<{ foo: boolean[] }>({ foo: [true] });
// const foo2 = foo<{ foo: string }>({ foo: "foo" });
// const foo3 = foo<{ foo: number[] }>({ foo: [1, 2, 3] });

//========================================================================================================================================================================================================================================================================================================================================暗黙的な方解決========================================================================================================================================================================================================================================================================================================================================
//

// const foo = <T,>(arg: T) => {
//   return { value: arg };
// };

// const foo1 = foo(true);
// const foo2 = foo<string | null>("");

//========================================================================================================================================================================================================================================================================================================================================extendsによる型制約========================================================================================================================================================================================================================================================================================================================================
//

// const foo = <T extends string>(arg: T) => {
//   arg.toLocaleLowerCase();
//   return { value: arg };
// };

//========================================================================================================================================================================================================================================================================================================================================extendsによる型制約と型の絞り込み========================================================================================================================================================================================================================================================================================================================================
//

// const foo = <T extends string | number>(arg: T) => {
//   if (typeof arg === "string") {
//     arg.toLocaleLowerCase();
//     return { value: arg.toLocaleUpperCase() };
//   }
//   return { value: arg.toFixed() };
// };
